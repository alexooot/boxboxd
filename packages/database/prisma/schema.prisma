generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Circuit2024 {
  circuitId   String     @id @map("circuitid") @db.VarChar(255)
  circuitName String     @map("circuitname") @db.VarChar(255)
  lat         Float?     @db.Real
  long        Float?     @db.Real
  locality    String?    @db.VarChar(255)
  country     String?    @db.VarChar(255)
  url         String?
  races       Race2024[]

  @@map("circuits_2024")
}

model Constructor2024 {
  constructorId        String                    @id @map("constructorid") @db.VarChar(255)
  name                 String                    @db.VarChar(255)
  nationality          String?                   @db.VarChar(255)
  url                  String?
  constructorStandings ConstructorStanding2024[]
  drivers              Driver2024[]              @relation("DriverConstructor")
  qualifyingResults    QualifyingResult2024[]
  results              Result2024[]
  sprintResults        SprintResult2024[]

  @@map("constructors_2024")
}

model Driver2024 {
  driverId             String                 @id @map("driverid") @db.VarChar(255)
  permanentNumber      Int?                   @map("permanentnumber")
  code                 String?                @db.VarChar(10)
  givenName            String                 @map("givenname") @db.VarChar(255)
  familyName           String                 @map("familyname") @db.VarChar(255)
  dateOfBirth          DateTime?              @map("dateofbirth") @db.Date
  nationality          String?                @db.VarChar(255)
  url                  String?
  currentConstructorId String?                @map("current_constructorid") @db.VarChar(255)
  driverStandings      DriverStanding2024[]
  currentConstructor   Constructor2024?       @relation("DriverConstructor", fields: [currentConstructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction, map: "fk_current_constructor")
  qualifyingResults    QualifyingResult2024[]
  results              Result2024[]
  sprintResults        SprintResult2024[]

  @@map("drivers_2024")
}

model Race2024 {
  raceId               Int                       @id @default(autoincrement()) @map("raceid")
  season               Int
  round                Int
  circuitId            String                    @map("circuitid") @db.VarChar(255)
  raceName             String                    @map("racename") @db.VarChar(255)
  date                 DateTime                  @db.Date
  time                 DateTime?                 @db.Time(6)
  url                  String?
  constructorStandings ConstructorStanding2024[]
  driverStandings      DriverStanding2024[]
  qualifyingResults    QualifyingResult2024[]
  circuit              Circuit2024               @relation(fields: [circuitId], references: [circuitId], onDelete: NoAction, onUpdate: NoAction)
  results              Result2024[]
  reviews              Review[]                  @relation("RaceReviews")
  sprintResults        SprintResult2024[]

  @@unique([season, round])
  @@map("races_2024")
}

model Result2024 {
  resultId               Int             @id @default(autoincrement()) @map("resultid")
  raceId                 Int             @map("raceid")
  driverId               String          @map("driverid") @db.VarChar(255)
  constructorId          String          @map("constructorid") @db.VarChar(255)
  number                 Int?
  position               Int?
  positionText           String?         @map("positiontext") @db.VarChar(50)
  points                 Float?          @db.Real
  grid                   Int?
  laps                   Int?
  status                 String?
  timeMillis             BigInt?         @map("timemillis")
  timeString             String?         @map("timestring") @db.VarChar(50)
  fastestLapRank         Int?            @map("fastestlaprank")
  fastestLap             Int?            @map("fastestlap")
  fastestLapTime         String?         @map("fastestlaptime") @db.VarChar(50)
  fastestLapAverageSpeed Float?          @map("fastestlapaveragespeed") @db.Real
  constructor            Constructor2024 @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction)
  driver                 Driver2024      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction)
  race                   Race2024        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([raceId, driverId])
  @@map("results_2024")
}

model SprintResult2024 {
  sprintResultId         Int             @id @default(autoincrement()) @map("sprintresultid")
  raceId                 Int             @map("raceid")
  driverId               String          @map("driverid") @db.VarChar(255)
  constructorId          String          @map("constructorid") @db.VarChar(255)
  number                 Int?
  position               Int?
  positionText           String?         @map("positiontext") @db.VarChar(50)
  points                 Float?          @db.Real
  grid                   Int?
  laps                   Int?
  status                 String?
  timeMillis             BigInt?         @map("timemillis")
  timeString             String?         @map("timestring") @db.VarChar(50)
  fastestLapRank         Int?            @map("fastestlaprank")
  fastestLap             Int?            @map("fastestlap")
  fastestLapTime         String?         @map("fastestlaptime") @db.VarChar(50)
  fastestLapAverageSpeed Float?          @map("fastestlapaveragespeed") @db.Real
  constructor            Constructor2024 @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction)
  driver                 Driver2024      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction)
  race                   Race2024        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([raceId, driverId])
  @@map("sprint_results_2024")
}

model QualifyingResult2024 {
  qualifyingResultId Int             @id @default(autoincrement()) @map("qualifyingresultid")
  raceId             Int             @map("raceid")
  driverId           String          @map("driverid") @db.VarChar(255)
  constructorId      String          @map("constructorid") @db.VarChar(255)
  number             Int?
  position           Int?
  q1                 String?         @db.VarChar(50)
  q2                 String?         @db.VarChar(50)
  q3                 String?         @db.VarChar(50)
  constructor        Constructor2024 @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction)
  driver             Driver2024      @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction)
  race               Race2024        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([raceId, driverId])
  @@map("qualifying_results_2024")
}

model DriverStanding2024 {
  driverStandingId Int        @id @default(autoincrement()) @map("driverstandingid")
  raceId           Int        @map("raceid")
  driverId         String     @map("driverid") @db.VarChar(255)
  position         Int
  positionText     String?    @map("positiontext") @db.VarChar(50)
  points           Float      @db.Real
  wins             Int
  driver           Driver2024 @relation(fields: [driverId], references: [driverId], onDelete: NoAction, onUpdate: NoAction)
  race             Race2024   @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([raceId, driverId])
  @@map("driver_standings_2024")
}

model ConstructorStanding2024 {
  constructorStandingId Int             @id @default(autoincrement()) @map("constructorstandingid")
  raceId                Int             @map("raceid")
  constructorId         String          @map("constructorid") @db.VarChar(255)
  position              Int
  positionText          String?         @map("positiontext") @db.VarChar(50)
  points                Float           @db.Real
  wins                  Int
  constructor           Constructor2024 @relation(fields: [constructorId], references: [constructorId], onDelete: NoAction, onUpdate: NoAction)
  race                  Race2024        @relation(fields: [raceId], references: [raceId], onDelete: NoAction, onUpdate: NoAction)

  @@unique([raceId, constructorId])
  @@map("constructor_standings_2024")
}

model User {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId String    @unique @map("clerk_user_id") @db.VarChar(255)
  username    String?   @unique @db.VarChar(50)
  email       String    @unique @db.VarChar(255)
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  reviews     Review[]

  @@map("users")
}

model Review {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String?   @map("user_id") @db.Uuid
  raceId    Int?      @map("race_id")
  rating    Int
  comment   String?
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  race      Race2024? @relation("RaceReviews", fields: [raceId], references: [raceId], onDelete: Cascade, onUpdate: NoAction)
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, raceId])
  @@map("reviews")
}
